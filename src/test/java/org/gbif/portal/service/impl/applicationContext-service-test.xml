<?xml version="1.0" encoding="UTF-8"?>
<!-- Defines the Spring Configuration for the Service Layer Managers -->
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
    "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

  <!-- OccurrenceManager -->
	<bean id="occurrenceManager" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.impl.OccurrenceManagerImpl">
				<property name="countryDAO" ref="countryDAORO"/>
				<property name="dataProviderDAO" ref="dataProviderDAORO"/>
				<property name="dataResourceDAO" ref="dataResourceDAORO"/>
				<property name="resourceNetworkDAO" ref="resourceNetworkDAORO"/>	  
				<property name="occurrenceRecordDAO" ref="occurrenceRecordDAORO"/>
				<property name="rawOccurrenceRecordDAO" ref="rawOccurrenceRecordDAORO"/>
				<property name="imageRecordDAO" ref="imageRecordDAORO"/>
				<property name="linkRecordDAO" ref="linkRecordDAORO"/>
				<property name="identifierRecordDAO" ref="identifierRecordDAORO"/>
				<property name="typificationRecordDAO" ref="typificationRecordDAORO"/>
				<property name="taxonConceptDAO" ref="taxonConceptDAORO"/>
				<property name="briefOccurrenceRecordDTOFactory" ref="briefOccurrenceRecordDTOFactory"/>
				<property name="occurrenceRecordDTOFactory" ref="occurrenceRecordDTOFactory"/>
				<property name="rawOccurrenceRecordDTOFactory" ref="rawOccurrenceRecordDTOFactory"/>
				<property name="imageRecordDTOFactory" ref="imageRecordDTOFactory"/>
				<property name="linkRecordDTOFactory" ref="linkRecordDTOFactory"/>
				<property name="identifierRecordDTOFactory" ref="identifierRecordDTOFactory"/>
				<property name="typificationRecordDTOFactory" ref="typificationRecordDTOFactory"/>
			</bean>
		</property>
		<property name="proxyInterfaces" value="org.gbif.portal.service.OccurrenceManager"/>
		<property name="interceptorNames" value="hibernateInterceptor,firstArgKeyParserAdvisor,searchConstraintsCheckerAdvisor"/>
	</bean>  
  
  <!-- DataResourceManager -->
  <bean id="dataResourceManager" class="org.springframework.aop.framework.ProxyFactoryBean">
	<property name="target">
		<bean class="org.gbif.portal.service.impl.DataResourceManagerImpl">
			<property name="dataResourceDAO" ref="dataResourceDAORO"/>
			<property name="dataProviderDAO" ref="dataProviderDAORO"/>	  
			<property name="resourceNetworkDAO" ref="resourceNetworkDAORO"/>	  
			<property name="resourceAccessPointDAO" ref="resourceAccessPointDAORO"/>	  
			<property name="propertyStoreNamespaceDAO" ref="propertyStoreNamespaceDAORO"/>	  
			<property name="imageRecordDAO" ref="imageRecordDAORO"/>
			<property name="agentDAO" ref="agentDAORO"/>
			<property name="dataProviderDTOFactory" ref="dataProviderDTOFactory"/>    
			<property name="dataResourceDTOFactory" ref="dataResourceDTOFactory"/>
			<property name="resourceNetworkDTOFactory" ref="resourceNetworkDTOFactory"/>
			<property name="resourceAccessPointDTOFactory" ref="resourceAccessPointDTOFactory"/>
			<property name="propertyStoreNamespaceDTOFactory" ref="propertyStoreNamespaceDTOFactory"/>
			<property name="imageRecordDTOFactory" ref="imageRecordDTOFactory"/>
			<property name="dataProviderAgentDTOFactory" ref="dataProviderAgentDTOFactory"/>
			<property name="dataResourceAgentDTOFactory" ref="dataResourceAgentDTOFactory"/>
			<property name="keyValueDTOFactory" ref="keyValueDTOFactory"/>			
			<property name="nubDataProviderId" value="203"/>
		</bean>	
	</property>		
    <property name="proxyInterfaces" value="org.gbif.portal.service.DataResourceManager"/>
    <property name="interceptorNames" value="hibernateInterceptor,firstArgKeyParserAdvisor,searchConstraintsCheckerAdvisor"/>
  </bean>		
	
  <!-- TaxonomyManager -->
	<bean id="taxonomyManager" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.impl.TaxonomyManagerImpl">
				<property name="countryDAO" ref="countryDAORO"/>
				<property name="taxonConceptDAO" ref="taxonConceptDAORO"/>
				<property name="taxonNameDAO" ref="taxonNameDAORO"/>
				<property name="commonNameDAO" ref="commonNameDAORO"/>
				<property name="imageRecordDAO" ref="imageRecordDAORO"/>			
				<property name="remoteConceptDAO" ref="remoteConceptDAORO"/>									
				<property name="relationshipAssertionDAO" ref="relationshipAssertionDAORO"/>
				<property name="dataResourceDAO" ref="dataResourceDAORO"/>	  
				<property name="briefTaxonConceptDTOFactory" ref="briefTaxonConceptDTOFactory"/>    
				<property name="taxonConceptDTOFactory" ref="taxonConceptDTOFactory"/>      
				<property name="commonNameDTOFactory" ref="commonNameDTOFactory"/>      
				<property name="relationshipAssertionDTOFactory" ref="relationshipAssertionDTOFactory"/>      
				<property name="keyValueDTOFactory" ref="keyValueDTOFactory"/>      
				<property name="taxonConceptCommonNameDTOFactory" ref="taxonConceptCommonNameDTOFactory"/>      
				<property name="imageRecordDTOFactory" ref="imageRecordDTOFactory"/>      
			</bean>
		</property>
		<property name="proxyInterfaces" value="org.gbif.portal.service.TaxonomyManager"/>
		<property name="interceptorNames"
			value="hibernateInterceptor,firstArgKeyParserAdvisor,searchConstraintsCheckerAdvisor"
		/>
	</bean>

	<!-- GeospatialManager -->
	<bean id="geospatialManager" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.impl.GeospatialManagerImpl">
				<property name="countryDAO" ref="countryDAORO"/>
				<property name="cellDensityDAO" ref="cellDensityDAORO"/>
				<property name="centiCellDensityDAO" ref="centiCellDensityDAORO"/>
				<property name="occurrenceRecordDAO" ref="occurrenceRecordDAORO"/>
				<property name="dataResourceDAO" ref="dataResourceDAORO"/>				
				<property name="cellDensityDTOFactory" ref="cellDensityDTOFactory"/>
				<property name="countryDTOFactory" ref="countryDTOFactory"/>
				<property name="countDTOFactory" ref="countDTOFactory"/>				
			</bean>
		</property>
		<property name="proxyInterfaces" value="org.gbif.portal.service.GeospatialManager"/>
		<property name="interceptorNames"
			value="hibernateInterceptor,searchConstraintsCheckerAdvisor"
		/>
	</bean>

	<!-- The DataProviderServices for contacting a data provider in "real-time" -->
	<bean id="dataProviderServices" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.provider.impl.DataProviderServicesImpl">
				<property name="occurrenceRecordDAO" ref="occurrenceRecordDAORO"/>
				<property name="requestUtils" ref="requestUtils"/>
				<property name="messageUtils" ref="messageUtils"/>
				<property name="templateUtils" ref="templateUtils"/>
				<property name="propertyStore" ref="indexPropertyStore"/>
			</bean>
		</property>
		<property name="proxyInterfaces"
			value="org.gbif.portal.service.provider.DataProviderServices"/>
		<property name="interceptorNames" value="hibernateInterceptor"/>
	</bean>
	
	<!-- The LogManager for handling user feedback, etc. -->
	<bean id="logManager" class="org.gbif.portal.service.impl.LogManagerImpl">
		<property name="occurrenceManager" ref="occurrenceManager"/>
		<property name="taxonomyManager" ref="taxonomyManager"/>
		<property name="dataResourceManager" ref="dataResourceManager"/>
		<property name="logMessageDAO" ref="logMessageDAORO"/>		
		<property name="logMessageDTOFactory" ref="logMessageDTOFactory"/>		
		<property name="gbifLogUtils" ref="logUtils"/>
		<property name="mailSender" ref="mailSender"/>
		<property name="providerTemplateMessage" ref="providerTemplateMessage"/>
		<property name="userTemplateMessage" ref="userTemplateMessage"/>
		<property name="portalEmailAddresses">
			<list>
				<value>dhobern@gbif.org</value>
			</list>
		</property>
	</bean>
	
	<!-- The Mail Sender -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gbif.org"/>
	</bean>	
	
	<!-- this is a template message that we can pre-load with default state -->
	<bean id="providerTemplateMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="portal@gbif.org"/>
	</bean>
	
	<!-- this is a template message that we can pre-load with default state -->
	<bean id="userTemplateMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="portal@gbif.org"/>
	</bean>
	
	<!-- System Manager -->
	<bean id="systemManager" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.impl.SystemManagerImpl">
				<property name="dataProviderDAO" ref="dataProviderDAORO"/>
				<property name="cacheManager" ref="eternalCacheManager"/>
				<property name="keyValueDTOFactory" ref="keyValueDTOFactory"/>
				<property name="dataSource" ref="dataSource"/>	
			</bean>
		</property>
		<property name="proxyInterfaces" value="org.gbif.portal.service.SystemManager"/>
		<property name="interceptorNames" value="hibernateInterceptor"/>
	</bean>

	<!-- TripletOccurrenceManager - supports the triplet queries for occurrence searches -->
	<bean id="tripletOccurrenceManager" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.triplet.impl.TripletQueryManagerImpl">
				<property name="simpleQueryDAO" ref="simpleQueryDAO"/>
				<property name="queryBuilder" ref="occurrenceQueryBuilder"/>
				<property name="dtoFactory" ref="briefOccurrenceRecordDTOFactory"/>
			</bean>
		</property>
		<property name="proxyInterfaces" value="org.gbif.portal.service.triplet.TripletQueryManager"/>
		<property name="interceptorNames" value="hibernateInterceptor"/>
	</bean>

	<!-- TripletOccurrenceCountsManager - supports triplet queries bringing back aggregate counts -->
	<bean id="tripletOccurrenceCountsManager"
		class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.triplet.impl.TripletQueryManagerImpl">
				<property name="simpleQueryDAO" ref="simpleQueryDAO"/>
				<property name="queryBuilder" ref="occurrenceQueryBuilder"/>
				<property name="dtoFactory" ref="countDTOFactory"/>
			</bean>
		</property>
		<property name="proxyInterfaces" value="org.gbif.portal.service.triplet.TripletQueryManager"/>
		<property name="interceptorNames" value="hibernateInterceptor"/>
	</bean>

	<!-- TripletOccurrencePointsManager - supports triplet queries that only return point results -->
	<bean id="tripletOccurrencePointsManager"
		class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.triplet.impl.TripletQueryManagerImpl">
				<property name="simpleQueryDAO" ref="simpleQueryDAO"/>
				<property name="queryBuilder" ref="occurrenceQueryBuilder"/>
				<property name="dtoFactory" ref="pointDTOFactory"/>
			</bean>
		</property>
		<property name="proxyInterfaces" value="org.gbif.portal.service.triplet.TripletQueryManager"/>
		<property name="interceptorNames" value="hibernateInterceptor"/>
	</bean>

	<!-- TripletTaxonomyManager - supports the triplet queries for taxon concept searches -->
	<bean id="tripletTaxonomyManager" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.triplet.impl.TripletQueryManagerImpl">
				<property name="simpleQueryDAO" ref="simpleQueryDAO"/>
				<property name="queryBuilder" ref="taxonomyQueryBuilder"/>
				<property name="dtoFactory" ref="taxonConceptDTOFactory"/>
			</bean>
		</property>
		<property name="proxyInterfaces" value="org.gbif.portal.service.triplet.TripletQueryManager"/>
		<property name="interceptorNames" value="hibernateInterceptor"/>
	</bean>

	<!-- TripletOccurrenceMapLayerManager - supports triplet queries bringing back map layer data -->
	<bean id="tripletOccurrenceMapLayerManager"
		class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="org.gbif.portal.service.triplet.impl.TripletQueryManagerImpl">
				<property name="simpleQueryDAO" ref="simpleQueryDAO"/>
				<property name="queryBuilder" ref="occurrenceQueryBuilder"/>
				<property name="dtoFactory" ref="cellDensityDTOFactory"/>
			</bean>
		</property>
		<property name="proxyInterfaces" value="org.gbif.portal.service.triplet.TripletQueryManager"/>
		<property name="interceptorNames" value="hibernateInterceptor"/>
	</bean>

	<!-- DTO Factories -->
	<bean id="briefTaxonConceptDTOFactory" class="org.gbif.portal.dto.taxonomy.BriefTaxonConceptDTOFactory"/>
	<bean id="briefOccurrenceRecordDTOFactory" class="org.gbif.portal.dto.occurrence.BriefOccurrenceRecordDTOFactory"/>
	<bean id="occurrenceRecordDTOFactory" class="org.gbif.portal.dto.occurrence.OccurrenceRecordDTOFactory"/>
	<bean id="rawOccurrenceRecordDTOFactory" class="org.gbif.portal.dto.occurrence.RawOccurrenceRecordDTOFactory"/>
	<bean id="imageRecordDTOFactory" class="org.gbif.portal.dto.occurrence.ImageRecordDTOFactory"/>
	<bean id="linkRecordDTOFactory" class="org.gbif.portal.dto.occurrence.LinkRecordDTOFactory"/>
	<bean id="identifierRecordDTOFactory"	class="org.gbif.portal.dto.occurrence.IdentifierRecordDTOFactory"/>
	<bean id="typificationRecordDTOFactory" class="org.gbif.portal.dto.occurrence.TypificationRecordDTOFactory"/>
	<bean id="taxonConceptDTOFactory" class="org.gbif.portal.dto.taxonomy.TaxonConceptDTOFactory"/>
  <bean id="taxonConceptCommonNameDTOFactory" class="org.gbif.portal.dto.taxonomy.TaxonConceptCommonNameDTOFactory"/>   
	<bean id="commonNameDTOFactory" class="org.gbif.portal.dto.taxonomy.CommonNameDTOFactory"/>
	<bean id="relationshipAssertionDTOFactory" class="org.gbif.portal.dto.taxonomy.RelationshipAssertionDTOFactory"/>
	<bean id="dataResourceDTOFactory" class="org.gbif.portal.dto.resources.DataResourceDTOFactory"/>
	<bean id="dataProviderDTOFactory" class="org.gbif.portal.dto.resources.DataProviderDTOFactory"/>
	<bean id="resourceNetworkDTOFactory" class="org.gbif.portal.dto.resources.ResourceNetworkDTOFactory"/>
	<bean id="resourceAccessPointDTOFactory" class="org.gbif.portal.dto.resources.ResourceAccessPointDTOFactory"/>
	<bean id="propertyStoreNamespaceDTOFactory" class="org.gbif.portal.dto.resources.PropertyStoreNamespaceDTOFactory"/>
	<bean id="dataProviderAgentDTOFactory" class="org.gbif.portal.dto.resources.DataProviderAgentDTOFactory"/>
	<bean id="dataResourceAgentDTOFactory" class="org.gbif.portal.dto.resources.DataResourceAgentDTOFactory"/>
	<bean id="cellDensityDTOFactory" class="org.gbif.portal.dto.geospatial.CellDensityDTOFactory"/>
	<bean id="countryDTOFactory" class="org.gbif.portal.dto.geospatial.CountryDTOFactory"/>
	<bean id="countDTOFactory" class="org.gbif.portal.dto.CountDTOFactory"/>
	<bean id="pointDTOFactory" class="org.gbif.portal.dto.geospatial.PointDTOFactory"/>
	<bean id="keyValueDTOFactory" class="org.gbif.portal.dto.KeyValueDTOFactory"/>
	<bean id="logMessageDTOFactory" class="org.gbif.portal.dto.log.LogMessageDTOFactory"/>	

	<!-- AOP advisors -->
	<!--Data Resource manager method Caching-->
	<!--bean id="dataResourceEternalCacheAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor" abstract="false"
		singleton="true" lazy-init="default" autowire="default" dependency-check="default">
		<property name="advice" ref="eternalCacheInterceptor"/>
		<property name="patterns">
			<list>
				<value>.*getNubDataProvider</value>
				<value>.*getDatasetAlphabet</value>
			</list>
		</property>
	</bean-->
	<!--Taxonomy manager method Caching-->
	<!--bean id="taxonomyEternalCacheAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor" abstract="false"
		singleton="true" lazy-init="default" autowire="default" dependency-check="default">
		<property name="advice" ref="eternalCacheInterceptor"/>
		<property name="patterns">
			<list>
				<value>.*getRootTaxonConceptsForTaxonomy</value>
				<value>.*getRootConceptRankForTaxonomy</value>
				<value>.*getTotalTaxonConceptCount</value>
				<value>.*getTaxonConceptCountForRank</value>
			</list>
		</property>
	</bean-->
	<!--Geospatial Manager method Caching -->
	<!--bean id="geospatialEternalCacheAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor" abstract="false"
		singleton="true" lazy-init="default" autowire="default" dependency-check="default">
		<property name="advice" ref="eternalCacheInterceptor"/>
		<property name="patterns">
			<list>
				<value>.*getCountryAlphabet</value>
				<value>.*get1DegCellDensities</value>
			</list>
		</property>
	</bean-->
	<!-- AOP advisor that checks the first arg is a valid Service Layer key -->
	<bean id="firstArgKeyParserAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor" abstract="false"
		singleton="true" lazy-init="default" autowire="default" dependency-check="default">
		<property name="advice" ref="firstArgKeyParserInterceptor"/>
		<property name="patterns">
			<list>
				<value>.*get.*For</value>
				<value>.*findTaxonConceptsWithSameScientificNameAndRankAs</value>
			</list>
		</property>
	</bean>

	<!-- AOP advisor that checks the first arg is a valid Service Layer key -->
	<bean id="searchConstraintsCheckerAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor" abstract="false"
		singleton="true" lazy-init="default" autowire="default" dependency-check="default">
		<property name="advice" ref="searchConstraintsCheckerInterceptor"/>
		<property name="patterns">
			<list>
				<value>.*find.*</value>
			</list>
		</property>
	</bean>

	<!-- AOP Interceptors -->
	<!-- Method Level Cache interceptor -->
	<!--bean id="lruCacheInterceptor" class="org.springframework.aop.interceptor.cache.EHCacheInterceptor">
	<property name="cacheManager" ref="lruCacheManager"/>
  </bean-->
	<!--bean id="eternalCacheInterceptor"
		class="org.springframework.aop.interceptor.cache.EHCacheInterceptor">
		<property name="cacheManager" ref="eternalCacheManager"/>
		<property name="defaultRefreshPeriod" value="86400"/>
		<property name="identifiers">
			<props>
				<prop key="java.util.Set">toString</prop>
				<prop key="java.util.List">toString</prop>
				<prop key="org.gbif.portal.dto.util.EntityType">getName</prop>
				<prop key="org.gbif.portal.dto.util.TaxonRankType">getName</prop>
			</props>
		</property>
	</bean-->
	<!-- AOP advisor that checks the first arg is a valid Service Layer key -->
	<bean id="firstArgKeyParserInterceptor" class="org.gbif.portal.service.aop.KeyParserInterceptor">
		<property name="argumentNo" value="0"/>
	</bean>
	<bean id="searchConstraintsCheckerInterceptor"
		class="org.gbif.portal.service.aop.SearchConstraintsCheckerInterceptor">
		<property name="maxResults" value="1000"/>
	</bean>

	<!-- Cache Managers -->
	<!--bean id="lruCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	<property name="configLocation" value="classpath:org/gbif/portal/service/ehcache-lru.xml"/>
  </bean-->
	<!--bean id="eternalCacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation"
			value="classpath:org/gbif/portal/service/impl/ehcache-eternal.xml"/>
	</bean-->
	<!-- Log utilities -->
	<bean id="logUtils" class="org.gbif.portal.util.log.GbifLogUtils"/>
</beans>