<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
	<!-- Reuseable Regular Expression Pattern 
		 Aus or Aus-bus Aus-bus-cus-->
	<bean id="RegEx:U" class="org.gbif.portal.util.spring.config.string.StringBean">
		<property name="string" value="([A-Z][a-zäëïöüÿ]+(?:-[a-zäëïöüÿ]+)*)"/>
	</bean>
	
	<!-- Reuseable Regular Expression Pattern 
		 aus or aus-bus or aus-bus-cus or "c-nigrum"-->
	<bean id="RegEx:L" class="org.gbif.portal.util.spring.config.string.StringBean">
		<property name="string" value="([a-z]-?[a-zäëïöüÿ]+(?:-[a-zäëïöüÿ]+)*)"/>
	</bean>
	
	<!-- Reuseable Regular Expression Pattern 
		 Markers -->
	<bean id="RegEx:M" class="org.gbif.portal.util.spring.config.string.StringBean">
		<property name="string" value="((?:subsp\.)|(?:subsp)|(?:ssp\.)|(?:ssp)|(?:var\.)|(?:var)|(?:forma)|(?:f\.)|(?:f)|(?:form))"/>
	</bean>
	
	<!-- Reuseable Regular Expression Pattern 
		 O is noise without spaces -->
	<bean id="RegEx:O" class="org.gbif.portal.util.spring.config.string.StringBean">
		<property name="string" value="([^ ]+)"/>
	</bean>
	
	<!-- Reuseable Regular Expression Pattern 
		 all noise -->
	<bean id="RegEx:noise" class="org.gbif.portal.util.spring.config.string.StringBean">
		<property name="string" value="(.*)?"/>
	</bean>	
	
	<!-- Reuseable Regular Expression Pattern 
		 subgenus marker -->
	
	<!-- Matches Aus -->
	<bean id="supraGenericMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="supraGenericGroup" value="1"/>
	</bean>
	
	<!-- Matches Aus -->
	<bean id="genericMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="rank" value="6000"/>
		<property name="genericGroup" value="1"/>
	</bean>
	
	<!-- Matches Aus (John Smith) Linneus 1776 
		 This is VERY greedy so is a last resort to catch Genera -->
	<bean id="genericWithAuthorMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<ref bean="RegEx:noise"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="rank" value="6000"/>
		<property name="genericGroup" value="1"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
			</list>
		</property>
		<property name="authorGroup" value="2"/>
	</bean>
	
	<!-- Matches Aus subgen. Bus -->
	<bean id="subGenericMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="(subgen\.)"/>
						</bean>	
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<!-- TODO - DEFINE RANKS IN A SINGLE LOCATION -->
		<property name="rank" value="6500"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
	</bean>

	<!-- Matches Aus sect. Bus 
		Aus nothosect. Bus -->
	<bean id="sectMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="((?:sect\.)|(?:nothosect\.))"/>
						</bean>	
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="rank" value="6600"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
	</bean>
	
	<!-- Matches Aus subsect. Bus 
		Aus nothosubsect. Bus -->
	<bean id="subSectMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="((?:subsect\.)|(?:nothosubsect\.))"/>
						</bean>	
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="rank" value="6700"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
	</bean>
	
	<!-- Matches Aus ser. Bus -->
	<bean id="seriesMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="(ser\.)"/>
						</bean>	
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="rank" value="6800"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
	</bean>
	
	<!-- Matches Aus subser. Bus -->
	<bean id="subSeriesMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="(subser\.)"/>
						</bean>	
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="rank" value="6900"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
	</bean>
	
	<!-- Matches Aus from Aus bus cus (Yadda Yadda) -->
	<bean id="genericExtractor" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<ref bean="RegEx:noise"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="rank" value="6000"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
			</list>
		</property>

	</bean>
	
	<!-- Matches Aus bus -->
	<bean id="binomialMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<ref bean="RegEx:L"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="specificGroup" value="2"/>
		<property name="rank" value="7000"/>
	</bean>
	
	<!-- Matches Aus bus (John Smith) 1771 -->
	<bean id="binomialMatcherPlusNoise" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<ref bean="RegEx:L"/>
						<ref bean="RegEx:noise"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="specificGroup" value="2"/>
		<property name="authorGroup" value="3"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
			</list>
		</property>
		<property name="rank" value="7000"/>
	</bean>
	
	<!-- Matches Aus bus cus -->
	<bean id="simpleTrinomialMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<ref bean="RegEx:L"/>
						<ref bean="RegEx:L"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="specificGroup" value="2"/>
		<property name="infraSpecificGroup" value="3"/>
		<property name="rank" value="8000"/>
	</bean>
	
	<!-- Matches Aus bus cus J. Smith 1771 -->
	<bean id="simpleTrinomialMatcherPlusNoise" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<ref bean="RegEx:L"/>
						<ref bean="RegEx:L"/>
						<ref bean="RegEx:noise"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="specificGroup" value="2"/>
		<property name="infraSpecificGroup" value="3"/>
		<property name="authorGroup" value="4"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
		<property name="rank" value="8000"/>
	</bean>
	
	<!-- Matches Aus bus var. cus -->
	<bean id="trinomialWithMarkerMatcher" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<ref bean="RegEx:L"/>
						<ref bean="RegEx:M"/>
						<ref bean="RegEx:L"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="specificGroup" value="2"/>
		<property name="infraSpecificMarkerGroup" value="3"/>
		<property name="infraSpecificGroup" value="4"/>
		<property name="rank" value="8000"/>
	</bean>
	
	<!-- Matches Aus bus var. cus John -->
	<bean id="trinomialWithMarkerMatcherPlusNoise" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<ref bean="RegEx:L"/>
						<ref bean="RegEx:M"/>
						<ref bean="RegEx:L"/>
						<ref bean="RegEx:noise"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="specificGroup" value="2"/>
		<property name="infraSpecificMarkerGroup" value="3"/>
		<property name="infraSpecificGroup" value="4"/>
		<property name="authorGroup" value="5"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
				<value>4</value>				
			</list>
		</property>
		<property name="rank" value="8000"/>
	</bean>

	<!-- Matches any string containing a hybrid marker -->
	<bean id="hybrid" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToHybridTaxonName"/>
	
	<!-- Matches Aus subfam. Bus -->
	<bean id="binomialSubFamily" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="((?:subfam\.))"/>
						</bean>
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<!-- TODO - Do we want to capture all the groups? -->
		<property name="supraGenericGroup" value="1"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
		<property name="rank" value="5500"/>
	</bean>
	
	<!-- Matches Aus trib. Bus -->
	<bean id="binomialTribe" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="((?:trib\.))"/>
						</bean>
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<!-- TODO - Do we want to capture all the groups? -->
		<property name="supraGenericGroup" value="1"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
		<property name="rank" value="5600"/>
	</bean>
	
	<!-- Matches Aus subtrib. Bus -->
	<bean id="binomialSubTribe" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="((?:subtrib\.))"/>
						</bean>
						<ref bean="RegEx:U"/>
					</list>
				</property>
			</bean>			
		</property>
		<!-- TODO - Do we want to capture all the groups? -->
		<property name="supraGenericGroup" value="1"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
		<property name="rank" value="5700"/>
	</bean>
	
	<!-- Matches Aus (Bus) -->
	<bean id="genusWithSubGenus" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value=" \("/>
						</bean>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="\)"/>
						</bean>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="infraGenericGroup" value="2"/>
		<!-- Exclude genus from canonical to avoid mismatch with genus-free name -->
		<property name="canonicalGroups">
			<list>
				<value>2</value>
			</list>
		</property>
		<property name="rank" value="6500"/>
	</bean>
	
	<!-- Matches (Bus) -->
	<bean id="subGenus" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractStringFactory">
				<property name="tokens">
					<list>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="\(?"/>
						</bean>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="\)?"/>
						</bean>
					</list>
				</property>
			</bean>			
		</property>
		<property name="infraGenericGroup" value="1"/>
		<property name="rank" value="6500"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
			</list>
		</property>
	</bean>
	
	<!-- Matches Aus (Bus) cus-->
	<bean id="speciesWithSubGenus" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value=" \("/>
						</bean>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="\) "/>
						</bean>
						<ref bean="RegEx:L"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="infraGenericGroup" value="2"/>
		<property name="specificGroup" value="3"/>		
		<!-- Exclude subgenus from canonical to avoid mismatch with subgenus-free name -->
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>3</value>
			</list>
		</property>
		<property name="rank" value="7000"/>
	</bean>
	
	<!-- Matches Aus (Bus) cus dus -->
	<bean id="subspeciesWithSubGenus" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value=" \("/>
						</bean>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="\) "/>
						</bean>
						<ref bean="RegEx:L"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value=" "/>
						</bean>
						<ref bean="RegEx:L"/>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="infraGenericGroup" value="2"/>
		<property name="specificGroup" value="3"/>		
		<property name="infraSpecificGroup" value="4"/>
		<!-- Exclude subgenus from canonical to avoid mismatch with subgenus-free name -->
		<property name="canonicalGroups">
			<list>
				<value>1</value>
				<value>3</value>
				<value>4</value>
			</list>
		</property>
		<property name="rank" value="8000"/>
	</bean>
	
	<!-- matches Aus sp. -->
	<bean id="unknownSpeciesInGenus" class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
		<property name="regex">
			<bean parent="abstractSpacedStringFactory">
				<property name="tokens">
					<list>
						<ref bean="RegEx:U"/>
						<bean class="org.gbif.portal.util.spring.config.string.StringBean">
							<property name="string" value="sp\."/>
						</bean>
					</list>
				</property>
			</bean>			
		</property>
		<property name="genericGroup" value="1"/>
		<property name="rank" value="6000"/>
		<property name="canonicalGroups">
			<list>
				<value>1</value>
			</list>
		</property>
	</bean>
	
	<!-- General Scientific Name parser -->
	<bean id="scientificNameParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="contextKeyHigherTaxonDisambiguationMap">
			<map>
				<entry key="Polychaeta" value="3000"/>
				<entry key="Siphonophora" value="4000"/>
			</map>
		</property>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<ref bean="hybrid"/>
				<bean parent="genericMatcher">
					<property name="rank" value="6000"/>
				</bean>
				<ref bean="binomialMatcher"/>
				<ref bean="simpleTrinomialMatcher"/>
				<ref bean="trinomialWithMarkerMatcher"/>
				<ref bean="binomialMatcherPlusNoise"/>
				<ref bean="simpleTrinomialMatcherPlusNoise"/>
				<ref bean="trinomialWithMarkerMatcherPlusNoise"/>
				<ref bean="subGenericMatcher"/>
				<ref bean="binomialSubFamily"/>
				<ref bean="binomialTribe"/>
				<ref bean="binomialSubTribe"/>
				<ref bean="sectMatcher"/>
				<ref bean="subSectMatcher"/>
				<ref bean="seriesMatcher"/>
				<ref bean="subSeriesMatcher"/>
				<ref bean="genusWithSubGenus"/>
				<ref bean="speciesWithSubGenus"/>
				<ref bean="subspeciesWithSubGenus"/>
				<ref bean="unknownSpeciesInGenus"/>
				<ref bean="subGenus"/>
				<ref bean="genericWithAuthorMatcher"/>				
			</list>
		</property>
	</bean>
	
	<!-- For reuse to reduce typing 
		 Concatinates Strings with spaces -->
	<bean abstract="true" id="abstractSpacedStringFactory" class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
		<property name="separator" value=" +"/>
	</bean>
	
	<!-- For reuse to reduce typing 
		 Concatinates Strings with no spaces -->
	<bean abstract="true" id="abstractStringFactory" class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean"/>
	
	<!-- Higher taxon Parser 
		This will look for a higher taxon in a string that is expected to be a monomial - it expects the rank to be supplied on the parse method 
		E.g. 
		ANIMALIA -> Animalia 
		Animalia -> Animalia
		ANIMALIA (1778) -> Animalia -->
	<bean id="higherTaxonParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="0"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		

	<!-- Unranked Name Parser 
		This will look for a possibly informal name with unspecified format -->
	<bean id="unrankedParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="0"/>
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		

		<!-- Kingdom Parser 
		 This will look for a kingdom in a string that is expected to be a monomial 
		 E.g. 
			ANIMALIA -> Animalia 
			Animalia -> Animalia
			ANIMALIA (1778) -> Animalia -->
	<bean id="kingdomParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="1000"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Phylum Parser - see the kingdom parser -->
	<bean id="phylumParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="2000"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Class Parser - see the kingdom parser -->
	<bean id="classParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="3000"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Order Parser - see the kingdom parser -->
	<bean id="orderParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="4000"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Suborder Parser - see the kingdom parser -->
	<bean id="suborderParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="4200"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Infraorder Parser - see the kingdom parser -->
	<bean id="infraorderParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="4350"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Superfamily Parser - see the kingdom parser -->
	<bean id="superfamilyParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="4500"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Family Parser - see the kingdom parser -->
	<bean id="familyParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="5000"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Subfamily Parser - see the kingdom parser -->
	<bean id="subfamilyParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="5500"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Tribe Parser - see the kingdom parser -->
	<bean id="tribeParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<bean class="org.gbif.portal.harvest.taxonomy.RegularExpressionToTaxonName">
					<property name="regex">
						<bean class="org.gbif.portal.util.spring.config.string.ConcatenatedStringFactoryBean">
							<property name="tokens">
								<list>
									<ref bean="RegEx:U"/>
									<ref bean="RegEx:noise"/>
								</list>
							</property>
						</bean>			
					</property>
					<property name="supraGenericGroup" value="1"/>
					<property name="rank" value="5600"/>
					<property name="prenormalisation" value="SENTENCE_CASE"/>					
					<!-- Ignore Noise -->
					<property name="canonicalGroups">
						<list>
							<value>1</value>
						</list>
					</property>
				</bean>
			</list>													
		</property>												
	</bean>		
	<!-- Subfamily Parser - see the kingdom parser -->
	<bean id="subgenusParser" class="org.gbif.portal.harvest.taxonomy.ScientificNameParser">
		<property name="taxonNameDAO" ref="taxonNameDAO"/>
		<property name="gbifLogUtils" ref="gbifLogUtils"/>
		<property name="orderedRegularExpresionsMapping">
			<list>
				<ref bean="subGenus"/>
			</list>													
		</property>												
	</bean>		
	
	<!-- Synchronisation of classification to the DB -->
	<bean id="taxonomyUtils" class="org.gbif.portal.harvest.taxonomy.TaxonomyUtils">
		<property name="taxonConceptDAO" ref="taxonConceptDAO"/>
		<property name="remoteConceptDAO" ref="remoteConceptDAO"/>
		<property name="taxonomyDenormaliserDAO" ref="taxonomyDenormaliserDAO"/>
		<property name="relationshipAssertionDAO" ref="relationshipAssertionDAO"/>
		<property name="namesToIgnoreUppercase">
			<set>
				<value>NOT ASSIGNED</value>
				<value>UNASSIGNED</value>
				<value>N/A</value>
				<value>NA</value>
				<value>NOT KNOWN</value>
				<value>UNKNOWN</value>
				<value>UNKNOWN UNKNOWN</value>
				<value>NOT SPECIFIED</value>
				<value>UNSPECIFIED</value>
				<value>NULL</value>
				<value>INCERTAE</value>
				<value>UNPLACED</value>
				<value>KINGDOM</value>
				<value>PHYLUM</value>
				<value>CLASS</value>
				<value>ORDER</value>
				<value>FAMILY</value>
				<value>GENUS</value>
				<value>SPECIES</value>
				<value>SUBSPECIES</value>
				<value>?</value>
				<value> </value>
				<value></value>
				<value>.</value>
				<value>INCERTAE SEDIS</value>
				<value>INCERTAE</value>
				<value>INVALID</value>
			</set>
		</property>
		<property name="infraspecifiMarkerMappingsUppercase">
			<map>
				<!-- variety -->
				<entry key="VAR." value="8010"/>
				<!-- form -->
				<entry key="F." value="8020"/>
				<entry key="FORM" value="8020"/>
				<entry key="FORMA" value="8020"/>	
			</map>
		</property>
	</bean>
</beans>